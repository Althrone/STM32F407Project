# This file contains a netplan-compatible configuration which cloud-init
# will apply on first-boot. Please refer to the cloud-init documentation and
# the netplan reference for full details:
#
# https://cloudinit.readthedocs.io/
# https://netplan.io/reference
#
# Some additional examples are commented out below

version: 2
ethernets:
  eth0:
    dhcp4: true
    optional: true
wifis:
  wlan0:
    dhcp4: true
    optional: true
    access-points:
      "LAB_106":
        password: "TAOJIE666"
#      myworkwifi:
#        password: "correct battery horse staple"
#      workssid:
#        auth:
#          key-management: eap
#          method: peap
#          identity: "me@example.com"
#          password: "passw0rd"
#          ca-certificate: /etc/my_ca.pem


/**
 * @brief  发送电机PWM数据
 * @param  USARTx: 串口号
 * @param  ANO_DT_SendMotoStruct: 电机PWM数据结构体
 **/
void ANO_DT_SendMoto(USART_TypeDef* USARTx,ANO_DT_SendMotoTypeDef* ANO_DT_SendMotoStruct)
{
    uint8_t sum=0;
    //计算数据长度
    uint8_t lenth=sizeof(ANO_DT_SendMotoTypeDef);
    //分派内存空间
    uint8_t* databuf=(uint8_t*)malloc(lenth+6);
    //填写其他帧
    *(databuf)=0xAA;                //帧头固定
    *(++databuf)=S_ADDR;            //在定义里面改
    *(++databuf)=D_ADDR;            //在定义里面改
    *(++databuf)=ANO_DT_Moto;       //功能字
    *(++databuf)=lenth;             //有效数据长度
    //数据填充
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto1),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto1,
                          databuf);
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto2),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto2,
                          databuf);
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto3),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto3,
                          databuf);
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto4),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto4,
                          databuf);
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto5),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto5,
                          databuf);
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto6),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto6,
                          databuf);
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto7),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto7,
                          databuf);
    databuf=ANO_DT_SplitMember(sizeof(ANO_DT_SendMotoStruct->ANO_DT_Moto8),
                          (uint8_t *)&ANO_DT_SendMotoStruct->ANO_DT_Moto8,
                          databuf);
    //指针回滚
    databuf=databuf-(lenth+6-2);
    //和校验
    for (uint8_t i = 0; i < lenth+6-1; i++)
    {
        sum=sum+*(databuf+i);
    }
    *(databuf+lenth+6-1)=sum;
    //发送数据
    for (uint8_t i = 0; i < lenth+6; i++)
    {
        USART_SendData(USARTx,*(databuf+i));
        while(USART_GetFlagStatus(USARTx,USART_FLAG_TXE) == RESET);
    }
    //释放内存
    free(databuf);
}